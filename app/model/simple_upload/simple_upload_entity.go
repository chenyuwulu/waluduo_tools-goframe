// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package simple_upload

import (
	"database/sql"

	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table simple_upload.
type Entity struct {
	ChunkNumber      string `orm:"chunk_number" json:"chunkNumber"`            // 当前切片标记
	CurrentChunkPath string `orm:"current_chunk_path" json:"currentChunkPath"` // 切片本地路径
	CurrentChunkSize string `orm:"current_chunk_size" json:"currentChunkSize"` // 当前切片容量
	FilePath         string `orm:"file_path" json:"filePath"`                  // 文件本地路径
	Filename         string `orm:"filename" json:"filename"`                   // 文件名
	Identifier       string `orm:"identifier" json:"identifier"`               // 文件标识（md5）
	IsDone           int    `orm:"is_done" json:"isDone"`                      // 是否上传完成
	TotalChunks      string `orm:"total_chunks" json:"totalChunks"`            // 切片总数
	TotalSize        string `orm:"total_size" json:"totalSize"`                // 总容量
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
