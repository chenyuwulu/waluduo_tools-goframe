// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package admins

import (
	"server/app/model/authorities"

	"github.com/gogf/gf/os/gtime"
	"golang.org/x/crypto/bcrypt"
)

type Admin struct {
	Id          uint        `orm:"id,primary"   json:"ID"`          // 自增ID
	CreateAt    *gtime.Time `orm:"create_at"    json:"CreatedAt"`   // 创建时间
	UpdateAt    *gtime.Time `orm:"update_at"    json:"UpdatedAt"`   // 更新时间
	DeleteAt    *gtime.Time `orm:"delete_at"    json:"DeletedAt"`   // 删除时间
	Uuid        string      `orm:"uuid"         json:"uuid"`        // 用户唯一标识UUID
	Nickname    string      `orm:"nickname"     json:"nickName"`    // 用户昵称
	HeaderImg   string      `orm:"header_img"   json:"headerImg"`   // 用户头像
	AuthorityId string      `orm:"authority_id" json:"authorityId"` // 用户角色ID
	Username    string      `orm:"username"     json:"userName"`    // 用户名
	Password    string      `orm:"password"     json:"-"`           // 用户登录密码
}

type AdminHasOneAuthority struct {
	*Admin
	Authority *authorities.Authorities `json:"authority"`
}

// RecordNotFound 根据条件判断数据是否存在
// 有数据返回false
// 没数据 true
func RecordNotFound(where ...interface{}) bool {
	return Model.RecordNotFound(where...)
}

func (m *arModel) RecordNotFound(where ...interface{}) bool {
	r, err := m.M.FindOne(where...)
	if r == nil && err == nil {
		return true
	}
	return false
}

// PasswordCheck 密码检查(工具类)
// false 校验失败
func (r *Entity) CompareHashAndPassword(password string) bool {
	if err := bcrypt.CompareHashAndPassword([]byte(r.Password), []byte(password)); err != nil {
		return false
	}
	return true
}

// EncryptedPassword: 加密密码(工具类)
func (r *Entity) EncryptedPassword() (err error) {
	if byTes, err := bcrypt.GenerateFromPassword([]byte(r.Password), bcrypt.DefaultCost); err == nil { // 加密密码
		r.Password = string(byTes)
		return nil
	}
	return err
}
